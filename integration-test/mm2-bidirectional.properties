# Kafka datacenters
clusters=ocpCluster, cldCluster
ocpCluster.bootstrap.servers=kafka-ocp:9092
cldCluster.bootstrap.servers=kafka-cld:9094

#ocpCluster and cldCluster configurations. Default value for the following settings is 3.
#If you want more details about those internal configurations, please see https://docs.confluent.io/home/connect/userguide.html#kconnect-internal-topics
#and https://docs.confluent.io/platform/current/connect/references/allconfigs.html#distributed-worker-configuration
ocpCluster.config.storage.replication.factor=1
cldCluster.config.storage.replication.factor=1

ocpCluster.offset.storage.replication.factor=1
cldCluster.offset.storage.replication.factor=1

ocpCluster.status.storage.replication.factor=1
cldCluster.status.storage.replication.factor=1

ocpCluster->cldCluster.enabled=true
cldCluster->ocpCluster.enabled=true

# MirrorMaker configuration. Default value for the following settings is 3
offset-syncs.topic.replication.factor=1
heartbeats.topic.replication.factor=1
checkpoints.topic.replication.factor=1

ocpCluster->cldCluster.topics=rep1
cldCluster->ocpCluster.topics=rep2
groups=.*

tasks.max=2
replication.factor=1
refresh.topics.enabled=true
sync.topic.configs.enabled=true
refresh.topics.interval.seconds=30
replication.policy.class=org.apache.kafka.connect.mirror.IdentityReplicationPolicy

topics.blacklist=.*[\-\.]internal, .*\.replica, __consumer_offsets, norep.*
groups.blacklist=console-consumer-.*, connect-.*, __.*

# Enable heartbeats and checkpoints
ocpCluster->cldCluster.emit.heartbeats.enabled=true
ocpCluster->cldCluster.emit.checkpoints.enabled=true
cldCluster->ocpCluster.emit.heartbeats.enabled=true
cldCluster->ocpCluster.emit.checkpoints.enabled=false

plugin.path=/opt/bitnami/kafka/plugins

#OCP->CLD Transforms
ocpCluster->cldCluster.transforms=FilterReplicatedData,InsertReplicatedHeader,FilterJsonRecords

ocpCluster->cldCluster.transforms.InsertReplicatedHeader.type=org.apache.kafka.connect.transforms.InsertHeader
ocpCluster->cldCluster.transforms.InsertReplicatedHeader.header=replicatedData
ocpCluster->cldCluster.transforms.InsertReplicatedHeader.value.literal=null

ocpCluster->cldCluster.transforms.FilterJsonRecords.type=com.gimral.transforms.connect.Filter$Value
ocpCluster->cldCluster.transforms.FilterJsonRecords.predicate=JsonTopics
ocpCluster->cldCluster.transforms.FilterJsonRecords.format=json
ocpCluster->cldCluster.transforms.FilterJsonRecords.condition=$[?(@.id == '1')]

ocpCluster->cldCluster.transforms.FilterReplicatedData.type=org.apache.kafka.connect.transforms.Filter
ocpCluster->cldCluster.transforms.FilterReplicatedData.predicate=IsDataReplicated

#OCP->CLD Predicates
ocpCluster->cldCluster.predicates: IsDataReplicated, JsonTopics

ocpCluster->cldCluster.predicates.IsDataReplicated.type: org.apache.kafka.connect.transforms.predicates.HasHeaderKey
ocpCluster->cldCluster.predicates.IsDataReplicated.name: replicatedData

ocpCluster->cldCluster.predicates.JsonTopics.type: org.apache.kafka.connect.transforms.predicates.TopicNameMatches
ocpCluster->cldCluster.predicates.JsonTopics.pattern: rep1

#CLD->OCP Transforms
cldCluster->ocpCluster.transforms=FilterReplicatedData,InsertReplicatedHeader

cldCluster->ocpCluster.transforms.InsertReplicatedHeader.type=org.apache.kafka.connect.transforms.InsertHeader
cldCluster->ocpCluster.transforms.InsertReplicatedHeader.header=replicatedData
cldCluster->ocpCluster.transforms.InsertReplicatedHeader.value.literal=null

cldCluster->ocpCluster.transforms.FilterReplicatedData.type=org.apache.kafka.connect.transforms.Filter
cldCluster->ocpCluster.transforms.FilterReplicatedData.predicate=IsDataReplicated

#CLD->OCP Predicates
cldCluster->ocpCluster.predicates: IsDataReplicated

cldCluster->ocpCluster.predicates.IsDataReplicated.type: org.apache.kafka.connect.transforms.predicates.HasHeaderKey
cldCluster->ocpCluster.predicates.IsDataReplicated.name: replicatedData


#####
auto.offset.reset=latest
consumer.auto.offset.reset=latest
ocpCluster.consumer.auto.offset.reset=latest
cldCluster.consumer.auto.offset.reset=latest